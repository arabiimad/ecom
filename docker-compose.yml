version: "3.9"

services:
  # -------------------------------------------------------------------
  # 1) INFRASTRUCTURE (identique à ton fichier d’origine)
  # -------------------------------------------------------------------
  postgres:
    container_name: ms_pg_sql
    image: postgres
    environment:
      POSTGRES_USER: ayoub
      POSTGRES_PASSWORD: ayoub
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - 5432:5432
    networks: [microservices-net]
    restart: unless-stopped

  pgadmin:
    container_name: ms_pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - 5050:80
    networks: [microservices-net]
    restart: unless-stopped

  mongodb:
    container_name: ms_mongo_db
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ayoub
      MONGO_INITDB_ROOT_PASSWORD: ayoub
    volumes:
      - mongo:/data
    ports:
      - 27017:27017
    networks: [microservices-net]

  mongo-express:
    container_name: ms_mongo_express
    image: mongo-express
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ayoub
      ME_CONFIG_MONGODB_ADMINPASSWORD: ayoub
      ME_CONFIG_MONGODB_SERVER: mongodb
    ports:
      - 8081:8081
    networks: [microservices-net]
    restart: unless-stopped

  mail-dev:
    container_name: ms_mail_dev
    image: maildev/maildev
    ports:
      - 1080:1080
      - 1025:1025
    networks: [microservices-net]

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks: [microservices-net]

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ms_kafka
    depends_on: [zookeeper]
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
    ports:
      - 9092:9092
    networks: [microservices-net]

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - 9411:9411
    networks: [microservices-net]

  keycloak:
    container_name: keycloak-ms
    image: quay.io/keycloak/keycloak
    command: ["start-dev"]
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - 9098:8080
    networks: [microservices-net]

  # -------------------------------------------------------------------
  # 2) MICRO-SERVICES SPRING BOOT
  #    (compilés dans /services/<name>/target/…)
  # -------------------------------------------------------------------
  config-server:
    build: ./services/config-server            # Dockerfile déjà présent
    container_name: ms_config
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - 8888:8888
    networks: [microservices-net]
    depends_on: [postgres]

  discovery-service:
    build: ./services/discovery
    container_name: ms_discovery
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - 8761:8761
    networks: [microservices-net]
    depends_on: [config-server]

  gateway-service:
    build: ./services/gateway
    container_name: ms_gateway
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - 8080:8080
    networks: [microservices-net]
    depends_on: [config-server, discovery-service]

  product-service:
    build: ./services/product
    container_name: ms_product
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - 9001:9001
    networks: [microservices-net]
    depends_on: [postgres, config-server, discovery-service]

  customer-service:        # ← ex-« user » / « customer » selon ton code
    build: ./services/customer
    container_name: ms_customer
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - 9002:9002
    networks: [microservices-net]
    depends_on: [postgres, config-server, discovery-service, keycloak]

  order-service:
    build: ./services/order
    container_name: ms_order
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - 9003:9003
    networks: [microservices-net]
    depends_on: [postgres, kafka, config-server, discovery-service]

  payment-service:
    build: ./services/payment
    container_name: ms_payment
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - 9004:9004
    networks: [microservices-net]
    depends_on: [postgres, config-server, discovery-service]

  notification-service:
    build: ./services/notification
    container_name: ms_notification
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - 9005:9005
    networks: [microservices-net]
    depends_on: [kafka, config-server, discovery-service]

  # -------------------------------------------------------------------
  # 3) FRONTEND APPLICATIONS
  # -------------------------------------------------------------------
  ecommerce-frontend:
    container_name: ms_ecommerce_frontend
    build:
      context: ./frontend # Assumes Dockerfile exists in ./frontend
      # dockerfile: Dockerfile # Optional: if your Dockerfile has a non-standard name
    # If not building with Docker, but files are pre-built:
    # image: alpine/git # Or any small image if just providing volumes
    # working_dir: /app
    # command: tail -f /dev/null # Keep container running if not serving
    volumes:
      - ./frontend/build:/app/frontend/build # Exposes build artifacts
    networks: [microservices-net]
    # No ports exposed here as Nginx will handle external access

  showcase-frontend:
    container_name: ms_showcase_frontend
    build:
      context: ./showcase-frontend # Assumes Dockerfile exists in ./showcase-frontend
      # dockerfile: Dockerfile
    volumes:
      - ./showcase-frontend/build:/app/showcase-frontend/build # Exposes build artifacts
    networks: [microservices-net]
    # No ports exposed here

  # -------------------------------------------------------------------
  # 4) NGINX REVERSE PROXY
  # -------------------------------------------------------------------
  nginx-proxy:
    container_name: ms_nginx_proxy
    image: nginx:latest
    ports:
      - "80:80" # HTTP traffic
      # - "443:443" # HTTPS traffic (if SSL is configured)
    volumes:
      # Mount the Nginx configuration file created in the previous step
      # This config should point to /app/showcase-frontend/build and /app/frontend/build for roots
      - ./nginx_config_yourdomain.conf:/etc/nginx/conf.d/default.conf:ro
      # Mount the build artifacts from the frontend services
      # Nginx needs to access these paths as defined in its configuration file's `root` directives.
      # The paths used in nginx_config_yourdomain.conf were /app/showcase-frontend/build and /app/frontend/build
      # So we ensure these are available inside the Nginx container.
      # Note: If frontend services build into different paths within their containers, adjust accordingly.
      # For simplicity, this example assumes the frontend services above make their builds available
      # at paths that can be mounted directly or that Nginx can access via named volumes if more complex.
      # However, the simplest is to ensure Nginx can see the build folders.
      # The volume mounts in ecommerce-frontend & showcase-frontend services are for making those builds
      # available to the Docker host/other containers. Nginx also needs them.
      - ./showcase-frontend/build:/app/showcase-frontend/build:ro
      - ./frontend/build:/app/frontend/build:ro
    networks: [microservices-net]
    depends_on:
      - ecommerce-frontend # Ensures frontend builds are available (if build is part of service start)
      - showcase-frontend  # Or remove if builds are done outside and folders always exist
      # Add dependencies to backend services if Nginx also proxies API calls (not covered by current Nginx config)
      # - gateway-service

# -------------------------------------------------------------------
# RÉSEAUX & VOLUMES
# -------------------------------------------------------------------
networks:
  microservices-net:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  mongo:
